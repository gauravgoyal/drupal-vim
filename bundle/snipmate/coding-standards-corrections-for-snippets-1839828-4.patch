diff --git a/bundle/vim-plugin-for-drupal/snipmate/drupal/php.snippets b/bundle/vim-plugin-for-drupal/snipmate/drupal/php.snippets
index 0fa94f7..e9c972d 100644
--- a/bundle/vim-plugin-for-drupal/snipmate/drupal/php.snippets
+++ b/bundle/vim-plugin-for-drupal/snipmate/drupal/php.snippets
@@ -2,56 +2,56 @@
 
 snippet checkbox
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'checkbox',
-		'#title' => t('${2:/* title */}'),
-		'#description' => t('${3:/* description */}'),
+	  '#type' => 'checkbox',
+	  '#title' => t('${2:/* title */}'),
+	  '#description' => t('${3:/* description */}'),
 	);
 
 snippet checkboxes
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'checkboxes',
-		'#title' => t('${2:/* title */}'),
-		'#description' => t('${3:/* description */}'),
-		'#options' => array(
-			'${4:/* key */}' => t('${5:/* value */}'),
-		);
+	  '#type' => 'checkboxes',
+	  '#title' => t('${2:/* title */}'),
+	  '#description' => t('${3:/* description */}'),
+	  '#options' => array(
+	    '${4:/* key */}' => t('${5:/* value */}'),
+	  ),
 	);
 
 snippet file
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'file',
-		'#title' => t('${2:/* title */}'),
-		'#description' => t('${3:/* description */}'),
+	  '#type' => 'file',
+	  '#title' => t('${2:/* title */}'),
+	  '#description' => t('${3:/* description */}'),
 	);
 
 snippet select
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'select',
-		'#title' => t('${2:/* title */}'),
-		'#description' => t('${3:/* description */}'),
-		'#options' => array(
-			'${4:/* key */}' => t('${5:/* value */}'),
-		),
+	  '#type' => 'select',
+	  '#title' => t('${2:/* title */}'),
+	  '#description' => t('${3:/* description */}'),
+	  '#options' => array(
+	    '${4:/* key */}' => t('${5:/* value */}'),
+	  ),
 	);
 
 snippet submit
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'submit',
-		'#value' => t('${2:/* value */}'),
+	  '#type' => 'submit',
+	  '#value' => t('${2:/* value */}'),
 	);
 
 snippet textarea
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'textarea',
-		'#title' => t('${2:/* title */}'),
-		'#rows' => ${3:/* default:5 */},
+	  '#type' => 'textarea',
+	  '#title' => t('${2:/* title */}'),
+	  '#rows' => ${3:/* default:5 */},
 	);
 
 snippet textfield
 	$form['${1:/* form element */}'] = array(
-		'#type' => 'textfield',
-		'#title' => t('${2:/* title */}'),
-		'#size' => ${3:/* default:60 */},
+	  '#type' => 'textfield',
+	  '#title' => t('${2:/* title */}'),
+	  '#size' => ${3:/* default:60 */},
 	);
 
 ## drupal_ functions
@@ -72,166 +72,146 @@ snippet dsm
 ## Hooks
 
 snippet hook_cron
-	
 	/**
 	 * Implements hook_cron().
 	 */
 	function `Filename()`_cron() {
-		${1:// Your code here.}
+	  ${1:// Your code here.}
 	}
-	
 
 snippet hook_form_alter
-	
 	/**
 	 * Implements hook_form_alter().
 	 */
 	function `Filename()`_form_alter(&$form, $form_state, $form_id) {
-		switch ($form_id) {
-			case '${1:/* your form */}':
-			  ${2:// your code.}
-		}
+	  switch ($form_id) {
+	    case '${1:/* your form */}':
+	      ${2:// your code.}
+	  }
 	}
-	
 
 snippet hook_help
-	
 	/**
 	 * Implements hook_help.
 	 */
 	function `Filename()`_help($path, $arg) {
-		switch ($path) {
-			case '${1:/* path */}':
-				// Enter your help text below
-				return t('${2:/* text */}');
-		}
+	  switch ($path) {
+	    case '${1:/* path */}':
+	      // Enter your help text below
+	      return t('${2:/* text */}');
+	  }
 	}
-	
 
 snippet hook_init
 	/**
 	 * Implements hook_init().
 	 */
 	function `Filename()`_init() {
-		${1:/* your code here */}
+	  ${1:/* your code here */}
 	}
 
 snippet hook_mail_alter
-	
 	/**
 	 * Implements hook_mail_alter().
 	 */
 	function `Filename()`_mail_alter(&$message) {
-		${1:// Your code here.}
+	  ${1:// Your code here.}
 	}
-	
 
 snippet hook_menu
 	/**
 	 * Implements hook_menu().
 	 */
 	function `Filename()`_menu() {
-		$${1:items} = array();
+	  $${1:items} = array();
 	
-		// Put your menu items here.
-		$$1['${2:path}'] = array(
-			'title' => '${3:title}',
-			'page callback' => '${4:page_callback}',
-			'access arguments' => array('${5:permission}'),
-			'type' => ${6:MENU_SUGGESTED_ITEM},
-		);
+	  // Put your menu items here.
+	  $$1['${2:path}'] = array(
+	    'title' => '${3:title}',
+	    'page callback' => '${4:page_callback}',
+	    'access arguments' => array('${5:permission}'),
+	    'type' => ${6:MENU_SUGGESTED_ITEM},
+	  );
 	
-		return $$1;
+	  return $$1;
 	}
-	
 
 snippet hook_menu_alter
-	
 	/**
 	 * Implements hook_menu_alter().
 	 */
 	function `Filename()`_menu_alter(&$${1:items}) {
-		$$1['${2:/* your code here */}']
+	  $$1['${2:/* your code here */}']
 	}
-	
 
 snippet hook_node_info
-	
 	/**
 	 * Implements hook_node_info().
 	 */
 	function `Filename()`_node_info() {
-		return array(
-			'${1:/* machine-readable name */}' => array(
-				'name' => t('${2:/* human-readable name */}'),
-				'module' => '`Filename()`',
-				'description' => t('${3:/* description */}'),
-			),
-		);
+	  return array(
+	    '${1:/* machine-readable name */}' => array(
+	      'name' => t('${2:/* human-readable name */}'),
+	      'module' => '`Filename()`',
+	      'description' => t('${3:/* description */}'),
+	    ),
+	  );
 	}
-	
 
 snippet hook_node_operations
-	
 	/**
 	 * Implements hook_node_operations().
 	 */
 	function `Filename()`_node_operations() {
-		$operations = array(
-		  '${1:/* operation */}' => array(
-		    'label' => t('${2:/* label */}'),
-		    'callback' => '${3:/* callback */}',
-		  ),
-		);
-		return $operations;
+	  $operations = array(
+	    '${1:/* operation */}' => array(
+	      'label' => t('${2:/* label */}'),
+	      'callback' => '${3:/* callback */}',
+	    ),
+	  );
+	  return $operations;
 	}
 	
 	/**
 	 * Callback function
 	 */
 	function $3 {
-		${4:// Your code here.}
+	  ${4:// Your code here.}
 	}
-	
 
 snippet hook_theme
-	
 	/**
 	 * Implements hook_theme().
 	 */
 	function `Filename()`_theme($existing, $type, $theme, $path) {
-		return array(
-			'${1:theme_function}' => array(
-				'arguments' => array(${2:/* Theme function arguments */}),
-				${3:/* See for options */}
-			),
-		);
+	  return array(
+	    '${1:theme_function}' => array(
+	      'arguments' => array(${2:/* Theme function arguments */}),
+	      ${3:/* See for options */}
+	    ),
+	  );
 	}
-	
 
 snippet hook_user_operations
-	
 	/**
 	 * Implements hook_user_operations().
 	 */
-	
 	function `Filename()`_user_operations() {
-		$operations = array(
-			'${1:/* operation */}' => array(
-				'label' => t('${2:/* label */}'),
-				'callback' => '${3:/* callback */}',
-			),
-		);
-		return $operations;
+	  $operations = array(
+	    '${1:/* operation */}' => array(
+	      'label' => t('${2:/* label */}'),
+	      'callback' => '${3:/* callback */}',
+	    ),
+	  );
+	  return $operations;
 	}
 	
 	/**
 	 * Callback function
 	 */
 	function $3 {
-		${4:// Your code here.}
+	  ${4:// Your code here.}
 	}
-	
 
 ## Everything else
 
diff --git a/bundle/vim-plugin-for-drupal/snipmate/drupal6/php.snippets b/bundle/vim-plugin-for-drupal/snipmate/drupal6/php.snippets
index e834dd4..ba373f4 100644
--- a/bundle/vim-plugin-for-drupal/snipmate/drupal6/php.snippets
+++ b/bundle/vim-plugin-for-drupal/snipmate/drupal6/php.snippets
@@ -2,19 +2,19 @@
 
 snippet markup
 	$form['${1:/* form element */}'] = array(
-		'#value' => '<${2:div}>' . '${3:/* markup */}' . '</$2>',
+	  '#value' => '<${2:div}>' . '${3:/* markup */}' . '</$2>',
 	);
 
 ## Database functions
 
 snippet db_fetch_array
 	while ($${1:row} = db_fetch_array($result)) {
-		${2:// Your code here}
+	  ${2:// Your code here}
 	}
 
 snippet db_fetch_object
 	while ($${1:row} = db_fetch_object($result)) {
-		${2:// Your code here}
+	  ${2:// Your code here}
 	}
 
 snippet db_query
@@ -42,123 +42,138 @@ snippet t
 ## Hooks
 
 snippet hook_block
-	
 	/**
 	 * Implements hook_block().
 	 */
 	function `Filename()`_block($op = 'list', $delta = 0, $edit = array()) {
-		switch ($op) {
-			case 'list':
-				${1}
-				break;
-			case 'configure':
-				break;
-			case 'save':
-				break;
-			case 'view':
-				break;
-		}
+	  switch ($op) {
+	    case 'list':
+	      ${1}
+	      break;
+
+	    case 'configure':
+	      break;
+
+	    case 'save':
+	      break;
+
+	    case 'view':
+	      break;
+	  }
 	}
-	
 
 snippet hook_comment
-	
 	/**
 	 * Implements hook_comment().
 	 */
 	function `Filename()`_comment(&$a1, $op) {
-		switch ($op) {
-			case "insert":
-				${1:// Your code here}
-				break;
-			case "update":
-				break;
-			case "view":
-				break;
-			case "validate":
-				break;
-			case "publish":
-				break;
-			case "unpublish":
-				break;
-			case "delete":
-				break;
-		}
+	  switch ($op) {
+	    case 'insert':
+	      ${1:// Your code here}
+	      break;
+
+	    case 'update':
+	      break;
+
+	    case 'view':
+	      break;
+
+	    case 'validate':
+	      break;
+
+	    case 'publish':
+	      break;
+
+	    case 'unpublish':
+	      break;
+
+	    case 'delete':
+	      break;
+	  }
 	}
-	
 
 snippet hook_node_type
-	
 	/**
 	 * Implements hook_node_type().
 	 */
 	function `Filename()`_node_type($op, $info) {
-		switch ($op) {
-			case 'delete':
-				${1:// Your code here.}
-				break;
-			case 'insert':
-				break;
-			case 'update':
-				break;
-		}
+	  switch ($op) {
+	    case 'delete':
+	      ${1:// Your code here.}
+	      break;
+
+	    case 'insert':
+	      break;
+
+	    case 'update':
+	      break;
+	  }
 	}
-	
 
 snippet hook_nodeapi
-	
 	/**
 	 * Implements hook_nodeapi().
 	 */
 	function `Filename()`_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
-		switch ($op) {
-			case 'alter':
-				${1:// Your code here.}
-				break;
-			case 'delete':
-				break;
-			case 'delete revision':
-				break;
-			case 'insert':
-				break;
-			case 'load':
-				break;
-			case 'prepare':
-				break;
-			case 'prepare translation':
-				break;
-			case 'print':
-				break;
-			case 'rss item':
-				break;
-			case 'search result':
-				break;
-			case 'presave':
-				break;
-			case 'update':
-				break;
-			case 'update index':
-				break;
-			case 'validate':
-				break;
-			case 'view':
-				break;
-		}
+	  switch ($op) {
+	    case 'alter':
+	      ${1:// Your code here.}
+	      break;
+
+	    case 'delete':
+	      break;
+
+	    case 'delete revision':
+	      break;
+
+	    case 'insert':
+	      break;
+
+	    case 'load':
+	      break;
+
+	    case 'prepare':
+	      break;
+
+	    case 'prepare translation':
+	      break;
+
+	    case 'print':
+	      break;
+
+	    case 'rss item':
+	      break;
+
+	    case 'search result':
+	      break;
+
+	    case 'presave':
+	      break;
+
+	    case 'update':
+	      break;
+
+	    case 'update index':
+	      break;
+
+	    case 'validate':
+	      break;
+
+	    case 'view':
+	      break;
+	  }
 	}
-	
 
 snippet hook_perm
-	
 	/**
 	 * Implements hook_perm().
 	 */
 	function `Filename()`_perm() {
-		return array('${1:/* permission */}');
+	  return array('${1:/* permission */}');
 	}
-	
 
 snippet hook_requirements
-	/*
+	/**
 	 * Implements hook_requirements().
 	 * @param string $phase
 	 *  The phase in which hook_requirements is run:
@@ -182,61 +197,58 @@ snippet hook_requirements
 	 */
 	function `Filename()`_requirements($phase) {
 	  $requirements = array();
-	
+
 	  ${1:// Your code here.}
-	
+
 	  return $requirements;
 	}
-	
 
 snippet hook_schema
-	
 	/**
 	 * Implements hook_schema().
 	 */
 	function `Filename()`_schema() {
-		$schema['${1:table}'] = array(
-			'description' => '${2}',
-			'fields' => array(
-				'${3:column}' => array(
-					'description' => '${4}',
-					'type' => '${5}',
-					'unsigned' => ${6},
-					'not null' => ${7},
-				),
-			),
-			'indexes' => array(
-				${8}
-			),
-			'unique keys' => array(
-				${9}
-			),
-			'primary key' => array(${10}),
-		);
-		return $schema
+	  $schema['${1:table}'] = array(
+	    'description' => '${2}',
+	    'fields' => array(
+	      '${3:column}' => array(
+	        'description' => '${4}',
+	        'type' => '${5}',
+	        'unsigned' => ${6},
+	        'not null' => ${7},
+	      ),
+	    ),
+	    'indexes' => array(
+	      ${8}
+	    ),
+	    'unique keys' => array(
+	      ${9}
+	    ),
+	    'primary key' => array(${10}),
+	  );
+	  return $schema
 	}
-	
 
 snippet hook_taxonomy
-	
 	/**
 	 * Implements hook_taxonomy().
 	 */
 	function `Filename()`_taxonomy($op, $type, $array = NULL) {
-		switch ($op) {
-			case 'delete':
-				${1:// Your code here.}
-				break;
-			case 'insert':
-				break;
-			case 'update':
-				break;
-		}
+	  switch ($op) {
+	    case 'delete':
+	      ${1:// Your code here.}
+	      break;
+
+	    case 'insert':
+	      break;
+
+	    case 'update':
+	      break;
+	  }
 	}
-	
 
 snippet hook_update_N
-	/*
+	/**
 	 * Implements hook_update_N().
 	 * @see http://api.drupal.org/api/drupal/developer--hooks--install.php/function/hook_update_N/6
 	 * @return array $ret
@@ -244,72 +256,78 @@ snippet hook_update_N
 	 */
 	function `Filename()`_update_N(&$sandbox) {
 	  $ret = array();
-	
+
 	  ${1:// Your code here.}
-	
+
 	  return $ret;
 	}
 
 snippet hook_user
-	
 	/**
 	 * Implements hook_user().
 	 */
 	function `Filename()`_user($op, &$edit, &$account, $category = NULL) {
-		switch ($op) {
-			case 'after_update':
-				${1:// Your code here.}
-				break;
-			case 'categories':
-				break;
-			case 'delete':
-				break;
-			case 'form':
-				break;
-			case 'insert':
-				break;
-			case 'load':
-				break;
-			case 'login':
-				break;
-			case 'logout':
-				break;
-			case 'register':
-				break;
-			case 'submit':
-				break;
-			case 'update':
-				break;
-			case 'validate':
-				break;
-			case 'view':
-				break;
-		}
+	  switch ($op) {
+	    case 'after_update':
+	      ${1:// Your code here.}
+	      break;
+
+	    case 'categories':
+	      break;
+
+	    case 'delete':
+	      break;
+
+	    case 'form':
+	      break;
+
+	    case 'insert':
+	      break;
+
+	    case 'load':
+	      break;
+
+	    case 'login':
+	      break;
+
+	    case 'logout':
+	      break;
+
+	    case 'register':
+	      break;
+
+	    case 'submit':
+	      break;
+
+	    case 'update':
+	      break;
+
+	    case 'validate':
+	      break;
+
+	    case 'view':
+	      break;
+	  }
 	}
-	
 
 ## Views hooks
 
 snippet hook_views_api
-	
 	/**
 	 * Implements hook_views_api().
 	 */
 	function `Filename()`_views_api() {
-		return array(
-			'api' => 2,
-			'path' => drupal_get_path('module', '`Filename()`') . '/views',
-		);
+	  return array(
+	    'api' => 2,
+	    'path' => drupal_get_path('module', '`Filename()`') . '/views',
+	  );
 	}
-	
 
 snippet hook_views_query_alter
-	
 	/**
 	 * Implements hook_views_query_alter().
 	 */
 	function `Filename()`_views_query_alter(&$view, &$query) {
-		${2:// Your code here.}
+	  ${2:// Your code here.}
 	}
-	
 
diff --git a/bundle/vim-plugin-for-drupal/snipmate/drupal7/php.snippets b/bundle/vim-plugin-for-drupal/snipmate/drupal7/php.snippets
index 84795d7..9a93b9c 100644
--- a/bundle/vim-plugin-for-drupal/snipmate/drupal7/php.snippets
+++ b/bundle/vim-plugin-for-drupal/snipmate/drupal7/php.snippets
@@ -2,7 +2,7 @@
 
 snippet markup
 	$form['${1:/* form element */}'] = array(
-		'#markup' => '<${2:div}>' . '${3:/* markup */}' . '</$2>',
+	  '#markup' => '<${2:div}>' . '${3:/* markup */}' . '</$2>',
 	);
 
 ## Database functions
@@ -24,154 +24,146 @@ snippet drupal_goto
 ## Hooks
 
 snippet hook_block
-	
 	/**
 	 * Implements hook_block_info().
 	 */
 	function `Filename()`_block_info() {
 	  ${1:// Your code here}
 	}
-	
+
 	/**
 	 * Implements hook_block_save().
 	 */
 	function `Filename()`_block_save() {
 	}
-	
+
 	/**
 	 * Implements hook_block_view().
 	 */
 	function `Filename()`_block_view() {
 	}
-	
+
 	/**
 	 * Implements hook_block_configure().
 	 */
 	function `Filename()`_block_configure() {
 	}
-	
+
 	/**
 	 * Implements hook_block_list_alter().
 	 */
 	function `Filename()`_block_list_alter() {
 	}
-	
+
 	/**
 	 * Implements hook_block_info_alter().
 	 */
 	function `Filename()`_block_info_alter() {
 	}
-	
+
 	/**
 	 * Implements hook_block_view_alter().
 	 */
 	function `Filename()`_block_view_alter() {
 	}
-	
+
 	/**
 	 * Implements hook_block_view_MODULE_DELTA_alter().
 	 */
 	function `Filename()`_block_view_MODULE_DELTA_alter() {
 	}
-	
 
 snippet hook_comment
-	
 	/**
 	 * Implements hook_comment_view().
 	 */
 	function `Filename()`_comment_view($comment, $view_mode, $langcode) {
 	  ${1:// Your code here}
 	}
-	
+
 	/**
 	 * Implements hook_comment_load().
 	 */
 	function `Filename()`_comment_load($comments) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_update().
 	 */
 	function `Filename()`_comment_update($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_insert().
 	 */
 	function `Filename()`_comment_insert($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_delete().
 	 */
 	function `Filename()`_comment_delete($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_presave().
 	 */
 	function `Filename()`_comment_presave($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_publish().
 	 */
 	function `Filename()`_comment_publish($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_unpublish().
 	 */
 	function `Filename()`_comment_unpublish($comment) {
 	}
-	
+
 	/**
 	 * Implements hook_comment_view_alter().
 	 */
 	function `Filename()`_comment_view_alter(&$build) {
 	}
-	
 
 snippet hook_node_type
-	
 	/**
 	 * Implements hook_node_type_delete().
 	 */
 	function `Filename()`_node_type_delete($info) {
 	  ${1:// Your code here}
 	}
-	
+
 	/**
 	 * Implements hook_node_type_insert().
 	 */
 	function `Filename()`_node_type_insert($info) {
 	}
-	
+
 	/**
 	 * Implements hook_node_type_update().
 	 */
 	function `Filename()`_node_type_update($info) {
 	}
-	
 
 snippet hook_permission
-	
 	/**
 	 * Implements hook_permission().
 	 */
 	function `Filename()`_permission() {
-		return array('${1:/* permission */}' => array(
+	  return array('${1:/* permission */}' => array(
 	            'title' => t('${2}'),
 	            'description' => t('${3:/* optional */}'),
 	            'restrict access' => t('${4:/* optional */}'),
 	            'warning' => t('${5:/* optional */}'),
 	          ));
 	}
-	
 
 snippet hook_requirements
-	/*
+	/**
 	 * Implements hook_requirements().
 	 * @param string $phase
 	 *  The phase in which hook_requirements is run:
@@ -196,15 +188,14 @@ snippet hook_requirements
 	 */
 	function `Filename()`_requirements($phase) {
 	  $requirements = array();
-	
+
 	  ${1:// Your code here.}
-	
+
 	  return $requirements;
 	}
-	
 
 snippet hook_update_N
-	/*
+	/**
 	 * Implements hook_update_N().
 	 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_update_N/7
 	 * @return array $ret
@@ -212,9 +203,9 @@ snippet hook_update_N
 	 */
 	function `Filename()`_update_N(&$sandbox) {
 	  $ret = array();
-	
+
 	  ${1:// Your code here.}
-	
+
 	  return $ret;
 	}
 
